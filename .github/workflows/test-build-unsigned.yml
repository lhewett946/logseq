# workflow to run tests and create unsigned builds
name: Test and Build Unsigned

permissions:
  contents: read

on:
  push:
    branches: [master]
    paths-ignore:
      - '*.md'
  pull_request:
    branches: [master]
    paths-ignore:
        - '*.md'    

env:
  CLOJURE_VERSION: '1.11.1.1413'
  NODE_VERSION: '20'
  JAVA_VERSION: '17'
  BABASHKA_VERSION: '1.0.168'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repository
        uses: actions/checkout@v4

      # Must set up Java before running some Clojure tools
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{env.JAVA_VERSION}}

      - name: Set up Clojure
        uses: DeLaGuardo/setup-clojure@10.1
        with:
          cli: ${{env.CLOJURE_VERSION}}
          bb: ${{env.BABASHKA_VERSION}}

      ## Run linting
      - name: Run clj-kondo lint
        run: clojure -M:clj-kondo --parallel --lint src

      - name: Carve lint for unused vars
        run: bb lint:carve

      - name: Lint for vars that are too large
        run: bb lint:large-vars

      - name: Lint for namespaces that aren't documented
        run: bb lint:ns-docstrings

      - name: Lint invalid translation entries
        run: bb lang:validate-translations

      - name: Lint to keep worker independent of frontend
        run: bb lint:worker-and-frontend-separate

      - name: Lint to keep db and file graph code separate
        run: bb lint:db-and-file-graphs-separate

  compile:
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repository
        uses: actions/checkout@v4

      # Must set up Java before running some Clojure tools
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{env.JAVA_VERSION}}

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Set up Clojure
        uses: DeLaGuardo/setup-clojure@10.1
        with:
          cli: ${{env.CLOJURE_VERSION}}

      - name: Compile CLJS
        run: yarn install && gulp build && yarn cljs:release-electron

  e2e-test:
    # TODO: Re-enable when ready to enable tests for file graphs
    if: false
    name: E2E Test Shard ${{ matrix.shard }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        shard: [1, 2, 3]
    needs: [ compile ]
    steps:
      - name: Check Out Repository
        uses: actions/checkout@v4

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Fetch yarn deps for E2E test
        run: |
          yarn install
          (cd static && yarn install && yarn rebuild:all)
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: true

      - name: Install Fluxbox
        run: sudo apt-get update && sudo apt-get install -y fluxbox
  
      # Emulate a virtual framebuffer on machines with no display hardware
      - name: Run XVFB
        run: Xvfb :1 -screen 0 1024x768x24 >/dev/null 2>&1 &
  
      # Start a lightweight window manager to simulate window actions (maximize,restore etc)
      - name: Start Fluxbox
        run:  DISPLAY=:1.0 fluxbox >/dev/null 2>&1 &
  
      - name: Run Playwright test
        run: DISPLAY=:1.0 npx playwright test --reporter github --shard=${{ matrix.shard }}/3
        env:
          LOGSEQ_CI: true
          DEBUG: "pw:api"
          RELEASE: true # skip dev only test

      - name: Save e2e artifacts
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: e2e-repeat-report-${{ matrix.shard}}-${{ matrix.repeat }}
          path: e2e-dump/*
          retention-days: 1    