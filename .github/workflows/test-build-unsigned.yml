# workflow to run tests and create unsigned builds
name: Test and Build Unsigned

permissions:
  contents: read

on:
  push:
    branches: [master]
    paths-ignore:
      - '*.md'
  pull_request:
    branches: [master]
    paths-ignore:
        - '*.md'    

env:
  CLOJURE_VERSION: '1.11.1.1413'
  NODE_VERSION: '20'
  JAVA_VERSION: '17'
  BABASHKA_VERSION: '1.0.168'

jobs:

  typos:
    name: Spell Check with Typos
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Actions Repository
        uses: actions/checkout@v4

      - name: Check spelling with custom config file
        uses: crate-ci/typos@v1.16.8
        with:
          config: ./typos.toml

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repository
        uses: actions/checkout@v4

      # Must set up Java before running some Clojure tools
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{env.JAVA_VERSION}}

      - name: Set up Clojure
        uses: DeLaGuardo/setup-clojure@10.1
        with:
          cli: ${{env.CLOJURE_VERSION}}
          bb: ${{env.BABASHKA_VERSION}}

      ## Run linting
      - name: Run clj-kondo lint
        run: clojure -M:clj-kondo --parallel --lint src

      - name: Carve lint for unused vars
        run: bb lint:carve

      - name: Lint for vars that are too large
        run: bb lint:large-vars

      - name: Lint for namespaces that aren't documented
        run: bb lint:ns-docstrings

      - name: Lint invalid translation entries
        run: bb lang:validate-translations

      - name: Lint to keep worker independent of frontend
        run: bb lint:worker-and-frontend-separate

      - name: Lint to keep db and file graph code separate
        run: bb lint:db-and-file-graphs-separate

  compile:
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repository
        uses: actions/checkout@v4

      # Must set up Java before running some Clojure tools
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{env.JAVA_VERSION}}

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Set up Clojure
        uses: DeLaGuardo/setup-clojure@10.1
        with:
          cli: ${{env.CLOJURE_VERSION}}

      - name: Compile CLJS
        run: yarn install && gulp build && yarn cljs:release-electron

#  e2e-test:
#    # TODO: Re-enable when ready to enable tests for file graphs
#    if: false
#    name: E2E Test Shard ${{ matrix.shard }}
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        shard: [1, 2, 3]
#    needs: [ compile ]
#    steps:
#      - name: Check Out Repository
#        uses: actions/checkout@v4
#
#      - name: Install Node.js, NPM and Yarn
#        uses: actions/setup-node@v3
#        with:
#          node-version: ${{ env.NODE_VERSION }}
#
#      - name: Fetch yarn deps for E2E test
#        run: |
#          yarn install
#          (cd static && yarn install && yarn rebuild:all)
#        env:
#          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: true
#
#      - name: Install Fluxbox
#        run: sudo apt-get update && sudo apt-get install -y fluxbox
#  
#      # Emulate a virtual framebuffer on machines with no display hardware
#      - name: Run XVFB
#        run: Xvfb :1 -screen 0 1024x768x24 >/dev/null 2>&1 &
#  
#      # Start a lightweight window manager to simulate window actions (maximize,restore etc)
#      - name: Start Fluxbox
#        run:  DISPLAY=:1.0 fluxbox >/dev/null 2>&1 &
#  
#      - name: Run Playwright test
#        run: DISPLAY=:1.0 npx playwright test --reporter github --shard=${{ matrix.shard }}/3
#        env:
#          LOGSEQ_CI: true
#          DEBUG: "pw:api"
#          RELEASE: true # skip dev only test
#
#      - name: Save e2e artifacts
#        if: ${{ failure() }}
#        uses: actions/upload-artifact@v4
#        with:
#          name: e2e-repeat-report-${{ matrix.shard}}-${{ matrix.repeat }}
#          path: e2e-dump/*
#          retention-days: 1

  db-graph-test:
    name: DB Graph Tests
    strategy:
        matrix:
          operating-system: [ubuntu-latest]
    runs-on: ${{ matrix.operating-system }}
    needs: [ compile ]
    steps:
      - name: Check Out Repository
        uses: actions/checkout@v4

      # Must set up Java before running some Clojure tools
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{env.JAVA_VERSION}}

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Set up Clojure
        uses: DeLaGuardo/setup-clojure@10.1
        with:
          cli: ${{env.CLOJURE_VERSION}}
          bb: ${{env.BABASHKA_VERSION}}

      - name: Fetch scripts yarn deps
        run: cd scripts && yarn install --frozen-lockfile
  
      - name: Create DB graph with properties
        run: cd scripts && yarn nbb-logseq src/logseq/tasks/db_graph/create_graph_with_properties.cljs ./properties-graph
  
      # TODO: Use a smaller, test-focused graph to test classes
      - name: Create DB graph with classes
        run: cd scripts && yarn nbb-logseq src/logseq/tasks/db_graph/create_graph_with_schema_org.cljs ./schema-graph
  
      - name: Fetch deps/db yarn deps
        run: cd deps/db && yarn install --frozen-lockfile
  
      - name: Validate created DB graphs
        run: cd deps/db && yarn nbb-logseq script/validate_db.cljs ../../scripts/properties-graph ../../scripts/schema-graph --closed-maps --group-errors
  
      - name: Export a created DB graph
        run: cd deps/db && yarn nbb-logseq script/export_graph.cljs ../../scripts/properties-graph -f properties.edn -t
  
      - name: Create graph from the export and diff the two graphs
        run: cd deps/db && yarn nbb-logseq -cp src:../outliner/src:script script/create_graph.cljs ./properties-graph2 properties.edn -iv && yarn nbb-logseq script/diff_graphs.cljs ../../scripts/properties-graph ./properties-graph2 -t

  clojure-script-test:
    name: Clojure-Script Tests
    strategy:
        matrix:
          operating-system: [ubuntu-latest]  
    runs-on: ${{ matrix.operating-system }}
    needs: [ db-graph-test ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      # Must set up Java before running some Clojure tools
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{env.JAVA_VERSION}}

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Set up Clojure
        uses: DeLaGuardo/setup-clojure@10.1
        with:
          cli: ${{env.CLOJURE_VERSION}}

      - name: Fetch Clojure deps
        run: clojure -A:cljs -P
  
      - name: Fetch yarn deps
        run: yarn install --frozen-lockfile
  
      - name: Build test asset
        run: clojure -M:test compile test
  
      - name: Run some ClojureScript tests against DB version
        run: DB_GRAPH=1 node static/tests.js -r frontend.db.query-dsl-test
  
      - name: Run ClojureScript query tests against DB version with basic query type
        run: DB_GRAPH=1 DB_QUERY_TYPE=basic node static/tests.js -r frontend.db.query-dsl-test
  
      - name: Run ClojureScript tests
        run: node static/tests.js -e fix-me

  build-android:
    name: Android Build
    runs-on: [ubuntu-latest]
    needs: [ clojure-script-test, typos, lint ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{env.JAVA_VERSION}}

      - name: Set up Clojure
        uses: DeLaGuardo/setup-clojure@10.1
        with:
          cli: ${{env.CLOJURE_VERSION}}

      - name: Compile CLJS
        run: yarn install && yarn release-app

      - name: Prepare public Directory
        run: |
          cp -r static public/
          rm -rvf public/static/js/publishing
          rm -rvf public/static/js/*.js.map || true
          rm -rvf public/static/*.*
          rm -rvf public/static/ios
          rm -rvf android/app/src/main/assets/public || true

      - name: Sync public to Android Project
        run: npx cap sync android
  
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
  
      - name: Build Android
        run: |
          ./gradlew clean
          ./gradlew zipApksForRelease
        working-directory: android

      - name: Rename Apk
        run: |
          mkdir builds
          mv app/build/outputs/apk/release/app-release-unsigned.apk ./builds/Logseq-android-unsigned.apk

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: logseq-android-builds
          path: builds

  build-linux-x64:
    name: Linux x64 Build
    runs-on: [ubuntu-latest]
    needs: [ clojure-script-test, typos, lint ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{env.JAVA_VERSION}}

      - name: Set up Clojure
        uses: DeLaGuardo/setup-clojure@10.1
        with:
          cli: ${{env.CLOJURE_VERSION}}

      - name: Build/Release Electron App
        run: yarn install && yarn electron:make
        working-directory: ./static

      - name: Save artifacts
        run: |
          mkdir -p builds
          # NOTE: save VERSION file to builds directory
          cp static/VERSION ./builds/VERSION
          mv static/out/make/*-*.AppImage ./builds/Logseq-linux-x64.AppImage
          mv static/out/make/zip/linux/x64/*-linux-x64-*.zip ./builds/Logseq-linux-x64.zip

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: logseq-linux-x64-builds
          path: builds

  build-linux-arm64:
    name: Linux arm64 Build
    runs-on: [ubuntu-latest]
    needs: [ clojure-script-test, typos, lint ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{env.JAVA_VERSION}}

      - name: Set up Clojure
        uses: DeLaGuardo/setup-clojure@10.1
        with:
          cli: ${{env.CLOJURE_VERSION}}
        
      - name: Fetch deps
        env:
          npm_config_arch: arm64
        run: |
          yarn install --target_arch=arm64 --target_platform=linux
          rsapi_version=`node -e 'console.log(require("@logseq/rsapi/package.json").optionalDependencies["@logseq/rsapi-linux-arm64-gnu"])'`
          temp_dir=`mktemp -d`
          cd "$temp_dir"
          echo '{"dependencies": {"@logseq/rsapi-linux-arm64-gnu": "'"$rsapi_version"'"}}' > package.json
          yarn install --ignore-platform
          cd -
          mv "$temp_dir/node_modules/@logseq/rsapi-linux-arm64-gnu" node_modules/@logseq/rsapi-linux-arm64-gnu
          rm -rf "$temp_dir" "node_modules/@logseq/rsapi-linux-x64-gnu"
        working-directory: ./static
        
      - name: Build/Release Electron App
        run: yarn electron:make-linux-arm64
        working-directory: ./static
        
      - name: Save artifacts
        run: |
          mkdir -p builds
          mv static/out/make/zip/linux/arm64/*-linux-arm64-*.zip ./builds/Logseq-linux-arm64.zip
        
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: logseq-linux-arm64-builds
          path: builds          